# Generated by Django 4.2.25 on 2025-10-23 01:22

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("rotations", "0002_historicalrotation_historicalhospital_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Exam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("title", models.CharField(help_text="Exam title", max_length=200)),
                (
                    "exam_type",
                    models.CharField(
                        choices=[
                            ("theory", "Theory"),
                            ("practical", "Practical"),
                            ("viva", "Viva Voce"),
                            ("internal", "Internal Assessment"),
                            ("midterm", "Midterm"),
                            ("final", "Final Exam"),
                            ("quiz", "Quiz"),
                            ("assignment", "Assignment"),
                        ],
                        default="theory",
                        help_text="Type of exam",
                        max_length=20,
                    ),
                ),
                (
                    "module_name",
                    models.CharField(
                        blank=True,
                        help_text="Module or course name (if not rotation-based)",
                        max_length=200,
                    ),
                ),
                ("date", models.DateField(help_text="Exam date")),
                ("start_time", models.TimeField(blank=True, help_text="Start time", null=True)),
                (
                    "duration_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Duration in minutes",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "max_marks",
                    models.DecimalField(
                        decimal_places=2,
                        default=100.0,
                        help_text="Maximum marks for this exam",
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "passing_marks",
                    models.DecimalField(
                        decimal_places=2,
                        default=40.0,
                        help_text="Passing marks threshold",
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "requires_eligibility",
                    models.BooleanField(
                        default=False,
                        help_text="Check attendance eligibility before allowing exam?",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("ongoing", "Ongoing"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="scheduled",
                        help_text="Current exam status",
                        max_length=20,
                    ),
                ),
                ("instructions", models.TextField(blank=True, help_text="Exam instructions")),
                ("remarks", models.TextField(blank=True, help_text="Additional remarks")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "conducted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Exam conductor/invigilator",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="conducted_exams",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rotation",
                    models.ForeignKey(
                        blank=True,
                        help_text="Associated rotation (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="exams",
                        to="rotations.rotation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Exam",
                "verbose_name_plural": "Exams",
                "ordering": ["-date", "title"],
            },
        ),
        migrations.CreateModel(
            name="Score",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "marks_obtained",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Marks obtained by student",
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0.0)],
                    ),
                ),
                (
                    "percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage scored",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A+", "A+ (90-100)"),
                            ("A", "A (80-89)"),
                            ("B+", "B+ (70-79)"),
                            ("B", "B (60-69)"),
                            ("C+", "C+ (50-59)"),
                            ("C", "C (40-49)"),
                            ("F", "F (Below 40)"),
                        ],
                        help_text="Letter grade",
                        max_length=5,
                    ),
                ),
                ("is_passing", models.BooleanField(default=False, help_text="Did student pass?")),
                (
                    "is_eligible",
                    models.BooleanField(
                        default=True, help_text="Was student eligible to appear in exam?"
                    ),
                ),
                (
                    "ineligibility_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for ineligibility (if applicable)",
                        max_length=200,
                    ),
                ),
                ("remarks", models.TextField(blank=True, help_text="Additional remarks")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "entered_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who entered this score",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="entered_scores",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "exam",
                    models.ForeignKey(
                        help_text="Associated exam",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scores",
                        to="results.exam",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student",
                        limit_choices_to={"role": "pg"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exam_scores",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Score",
                "verbose_name_plural": "Scores",
                "ordering": ["-exam__date", "student__last_name"],
                "indexes": [
                    models.Index(fields=["exam", "student"], name="results_sco_exam_id_6a3e9c_idx"),
                    models.Index(fields=["is_passing"], name="results_sco_is_pass_397b24_idx"),
                    models.Index(fields=["grade"], name="results_sco_grade_d424ad_idx"),
                ],
                "unique_together": {("exam", "student")},
            },
        ),
        migrations.AddIndex(
            model_name="exam",
            index=models.Index(fields=["date", "status"], name="results_exa_date_0967f0_idx"),
        ),
        migrations.AddIndex(
            model_name="exam",
            index=models.Index(fields=["exam_type"], name="results_exa_exam_ty_d2b45f_idx"),
        ),
        migrations.AddIndex(
            model_name="exam",
            index=models.Index(fields=["rotation"], name="results_exa_rotatio_5d2c62_idx"),
        ),
    ]
