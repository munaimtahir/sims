# Generated by Django 4.2.25 on 2025-10-10 22:31

import datetime

import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("rotations", "0002_historicalrotation_historicalhospital_and_more"),
        ("logbook", "0005_historicallogbookreview_historicalprocedure_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("cases", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalCaseCategory",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Name of the case category",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the case category"
                    ),
                ),
                (
                    "color_code",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for visual identification",
                        max_length=7,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this category is currently active",
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Sort order for display"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Case Category",
                "verbose_name_plural": "historical Case Categories",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalClinicalCase",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "case_title",
                    models.CharField(
                        help_text="Descriptive title for the case", max_length=300
                    ),
                ),
                (
                    "date_encountered",
                    models.DateField(help_text="Date when the case was encountered"),
                ),
                (
                    "patient_age",
                    models.PositiveIntegerField(
                        help_text="Patient age in years",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(150),
                        ],
                    ),
                ),
                (
                    "patient_gender",
                    models.CharField(
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Other"),
                            ("U", "Unknown/Not Specified"),
                        ],
                        help_text="Patient gender",
                        max_length=1,
                    ),
                ),
                (
                    "complexity",
                    models.CharField(
                        choices=[
                            ("simple", "Simple"),
                            ("moderate", "Moderate"),
                            ("complex", "Complex"),
                            ("highly_complex", "Highly Complex"),
                        ],
                        default="moderate",
                        help_text="Complexity level of the case",
                        max_length=20,
                    ),
                ),
                (
                    "chief_complaint",
                    models.TextField(
                        help_text="Patient's chief complaint or presenting symptoms"
                    ),
                ),
                (
                    "history_of_present_illness",
                    models.TextField(
                        help_text="Detailed history of the present illness"
                    ),
                ),
                (
                    "past_medical_history",
                    models.TextField(
                        blank=True, help_text="Relevant past medical history"
                    ),
                ),
                (
                    "family_history",
                    models.TextField(blank=True, help_text="Relevant family history"),
                ),
                (
                    "social_history",
                    models.TextField(
                        blank=True,
                        help_text="Social history including habits and occupation",
                    ),
                ),
                (
                    "physical_examination",
                    models.TextField(help_text="Physical examination findings"),
                ),
                (
                    "investigations",
                    models.TextField(
                        blank=True, help_text="Investigations ordered and results"
                    ),
                ),
                (
                    "differential_diagnosis",
                    models.TextField(
                        blank=True, help_text="Differential diagnosis considerations"
                    ),
                ),
                (
                    "management_plan",
                    models.TextField(help_text="Management and treatment plan"),
                ),
                (
                    "learning_objectives",
                    models.TextField(
                        blank=True, help_text="Learning objectives for this case"
                    ),
                ),
                (
                    "clinical_reasoning",
                    models.TextField(
                        help_text="Clinical reasoning and thought process"
                    ),
                ),
                (
                    "learning_points",
                    models.TextField(help_text="Key learning points from this case"),
                ),
                (
                    "challenges_faced",
                    models.TextField(
                        blank=True,
                        help_text="Challenges encountered and how they were addressed",
                    ),
                ),
                (
                    "literature_review",
                    models.TextField(
                        blank=True, help_text="Relevant literature review and evidence"
                    ),
                ),
                (
                    "outcome",
                    models.TextField(
                        blank=True, help_text="Patient outcome and follow-up"
                    ),
                ),
                (
                    "follow_up_plan",
                    models.TextField(
                        blank=True, help_text="Follow-up plan and actions required"
                    ),
                ),
                (
                    "supervisor_feedback",
                    models.TextField(
                        blank=True, help_text="Supervisor's feedback on this case"
                    ),
                ),
                (
                    "self_assessment_score",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Self-assessment score (1-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "supervisor_assessment_score",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Supervisor's assessment score (1-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "case_files",
                    models.TextField(
                        blank=True,
                        help_text="Additional case files (reports, documents)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "case_images",
                    models.TextField(
                        blank=True,
                        help_text="Case images (X-rays, scans, photos)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted for Review"),
                            ("approved", "Approved"),
                            ("needs_revision", "Needs Revision"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        help_text="Current status of the case",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this case is active"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Mark as featured case for educational purposes",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "reviewed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when case was reviewed",
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Clinical Case",
                "verbose_name_plural": "historical Clinical Cases",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RemoveConstraint(
            model_name="clinicalcase",
            name="case_date_not_future",
        ),
        migrations.AddConstraint(
            model_name="clinicalcase",
            constraint=models.CheckConstraint(
                check=models.Q(("date_encountered__lte", datetime.date(2025, 10, 10))),
                name="case_date_not_future",
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="category",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Category of the clinical case",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="cases.casecategory",
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="User who created this case",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="pg",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Postgraduate who created this case",
                limit_choices_to={"role": "pg"},
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="primary_diagnosis",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Primary diagnosis",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="logbook.diagnosis",
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="reviewed_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="User who reviewed/approved this case",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="rotation",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Rotation during which this case occurred",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="rotations.rotation",
            ),
        ),
        migrations.AddField(
            model_name="historicalclinicalcase",
            name="supervisor",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Supervising consultant",
                limit_choices_to={"role__in": ["supervisor", "admin"]},
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalcasecategory",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
