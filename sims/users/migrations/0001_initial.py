# Generated by Django 5.2.1 on 2025-05-30 07:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("supervisor", "Supervisor"),
                            ("pg", "Postgraduate"),
                        ],
                        help_text="User role determines access permissions in SIMS",
                        max_length=20,
                    ),
                ),
                (
                    "specialty",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("medicine", "Internal Medicine"),
                            ("surgery", "Surgery"),
                            ("pediatrics", "Pediatrics"),
                            ("gynecology", "Gynecology & Obstetrics"),
                            ("orthopedics", "Orthopedics"),
                            ("cardiology", "Cardiology"),
                            ("neurology", "Neurology"),
                            ("psychiatry", "Psychiatry"),
                            ("dermatology", "Dermatology"),
                            ("radiology", "Radiology"),
                            ("anesthesia", "Anesthesia"),
                            ("pathology", "Pathology"),
                            ("microbiology", "Microbiology"),
                            ("pharmacology", "Pharmacology"),
                            ("community_medicine", "Community Medicine"),
                            ("forensic_medicine", "Forensic Medicine"),
                            ("other", "Other"),
                        ],
                        help_text="Medical specialty (required for PGs and Supervisors)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1", "Year 1"),
                            ("2", "Year 2"),
                            ("3", "Year 3"),
                            ("4", "Year 4"),
                        ],
                        help_text="Training year (required for PGs)",
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "registration_number",
                    models.CharField(
                        blank=True,
                        help_text="Medical council registration number",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, help_text="Contact phone number", max_length=15, null=True
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True, help_text="IP address of last login", null=True
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False, help_text="Mark as archived instead of deleting"
                    ),
                ),
                (
                    "archived_date",
                    models.DateTimeField(
                        blank=True, help_text="Date when user was archived", null=True
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Admin who created this user account",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Last admin to modify this user account",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users_modified",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned supervisor (required for PGs)",
                        limit_choices_to={"role": "supervisor"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_pgs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "SIMS User",
                "verbose_name_plural": "SIMS Users",
                "ordering": ["role", "last_name", "first_name"],
                "indexes": [
                    models.Index(fields=["role"], name="users_user_role_36d76d_idx"),
                    models.Index(fields=["specialty"], name="users_user_special_51df32_idx"),
                    models.Index(fields=["supervisor"], name="users_user_supervi_cb7d54_idx"),
                    models.Index(fields=["is_active"], name="users_user_is_acti_ddda02_idx"),
                ],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
