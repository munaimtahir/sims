# Generated by Django 4.2.25 on 2025-10-10 22:31

import datetime

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("logbook", "0004_remove_logbookentry_logbook_entry_date_not_future_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalLogbookReview",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("needs_revision", "Needs Revision"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        help_text="Review status",
                        max_length=20,
                    ),
                ),
                (
                    "review_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date when the review was conducted",
                    ),
                ),
                (
                    "feedback",
                    models.TextField(help_text="Overall feedback on the entry"),
                ),
                (
                    "strengths_identified",
                    models.TextField(
                        blank=True, help_text="Strengths demonstrated in this case"
                    ),
                ),
                (
                    "areas_for_improvement",
                    models.TextField(
                        blank=True, help_text="Areas requiring improvement"
                    ),
                ),
                (
                    "recommendations",
                    models.TextField(
                        blank=True,
                        help_text="Specific recommendations for future learning",
                    ),
                ),
                (
                    "follow_up_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether follow-up discussion is required",
                    ),
                ),
                (
                    "clinical_knowledge_score",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Clinical knowledge score (1-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "clinical_skills_score",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Clinical skills score (1-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "professionalism_score",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Professionalism score (1-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "overall_score",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Overall performance score (1-10)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Logbook Review",
                "verbose_name_plural": "historical Logbook Reviews",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProcedure",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="Name of the procedure", max_length=200
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("basic", "Basic Procedures"),
                            ("intermediate", "Intermediate Procedures"),
                            ("advanced", "Advanced Procedures"),
                            ("diagnostic", "Diagnostic Procedures"),
                            ("therapeutic", "Therapeutic Procedures"),
                            ("surgical", "Surgical Procedures"),
                            ("emergency", "Emergency Procedures"),
                        ],
                        default="basic",
                        help_text="Category of the procedure",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of the procedure"
                    ),
                ),
                (
                    "difficulty_level",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Difficulty level from 1 (basic) to 5 (expert)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        blank=True, help_text="Typical duration in minutes", null=True
                    ),
                ),
                (
                    "cme_points",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="CME points typically awarded for this procedure",
                    ),
                ),
                (
                    "learning_objectives",
                    models.TextField(
                        blank=True, help_text="Learning objectives for this procedure"
                    ),
                ),
                (
                    "prerequisites",
                    models.TextField(
                        blank=True,
                        help_text="Prerequisites or requirements before performing",
                    ),
                ),
                (
                    "assessment_criteria",
                    models.TextField(
                        blank=True,
                        help_text="Criteria for assessing competency in this procedure",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this procedure is currently active",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Procedure",
                "verbose_name_plural": "historical Procedures",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSkill",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the skill", max_length=200),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("clinical", "Clinical Skills"),
                            ("technical", "Technical Skills"),
                            ("communication", "Communication Skills"),
                            ("professional", "Professional Skills"),
                            ("academic", "Academic Skills"),
                            ("leadership", "Leadership Skills"),
                            ("research", "Research Skills"),
                        ],
                        default="clinical",
                        help_text="Category of the skill",
                        max_length=20,
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("basic", "Basic Level"),
                            ("intermediate", "Intermediate Level"),
                            ("advanced", "Advanced Level"),
                            ("expert", "Expert Level"),
                        ],
                        default="basic",
                        help_text="Expected competency level",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed description of the skill"
                    ),
                ),
                (
                    "competency_requirements",
                    models.TextField(
                        blank=True, help_text="Requirements to demonstrate competency"
                    ),
                ),
                (
                    "assessment_methods",
                    models.TextField(
                        blank=True, help_text="Methods for assessing this skill"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this skill is currently active"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Skill",
                "verbose_name_plural": "historical Skills",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RemoveConstraint(
            model_name="logbookentry",
            name="logbook_entry_date_not_future",
        ),
        migrations.AddConstraint(
            model_name="logbookentry",
            constraint=models.CheckConstraint(
                check=models.Q(("date__lte", datetime.date(2025, 10, 10))),
                name="logbook_entry_date_not_future",
            ),
        ),
        migrations.AddField(
            model_name="historicalskill",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalprocedure",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicallogbookreview",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicallogbookreview",
            name="logbook_entry",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Logbook entry being reviewed",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="logbook.logbookentry",
            ),
        ),
        migrations.AddField(
            model_name="historicallogbookreview",
            name="reviewer",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                help_text="Person conducting the review",
                limit_choices_to={"role__in": ["supervisor", "admin"]},
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
